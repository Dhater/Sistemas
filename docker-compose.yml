services:
  # M칩dulo de descarga del dataset (arranca por defecto)
  descarga-dataset:
    build: ./Descarga_Dataset
    container_name: yahoo_descarga_dataset
    volumes:
      - dataset_volume:/data
      - ./local_data:/data  # Carpeta local del proyecto mapeada dentro del contenedor
    environment:
      - KAGGLE_USERNAME=${KAGGLE_USERNAME}
      - KAGGLE_KEY=${KAGGLE_KEY}
      - DB_HOST=database
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    restart: "no"
    networks:
      - yahoo_network
    depends_on:
      database:
        condition: service_healthy

  # Base de datos PostgreSQL (arranca por defecto)
  database:
    build: ./Database
    container_name: yahoo_database
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - database_volume:/var/lib/postgresql/data
      - dataset_volume:/data
      - ./Database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - yahoo_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Servicio de cach칠 Redis (arranca por defecto)
  cache:
    image: redis:7-alpine
    container_name: yahoo_cache
    ports:
      - "6379:6379"
    networks:
      - yahoo_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # M칩dulos manuales (no arrancan autom치ticamente)
  cache-manager:
    build: ./Cache
    container_name: yahoo_cache_manager
    environment:
      - REDIS_HOST=cache
      - REDIS_PORT=6379
      - CACHE_POLICY=${CACHE_POLICY}
      - CACHE_SIZE=${CACHE_SIZE}
      - CACHE_TTL=${CACHE_TTL}
    depends_on:
      cache:
        condition: service_healthy
    networks:
      - yahoo_network

  llm-client:
      build:
        context: ./llm_client
      container_name: llm_client
      profiles: ["manual"]
      volumes:
        - ./local_data:/data
      env_file:
        - .env
      environment:
        - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
        - MODEL=${MODEL}
        - CSV_PATH=${CSV_PATH}
        - LOCAL_JSON_PATH=${LOCAL_JSON_PATH}
        - DB_HOST=${DB_HOST}
        - DB_PORT=${DB_PORT}
        - DB_NAME=${DB_NAME}
        - DB_USER=${DB_USER}
        - DB_PASSWORD=${DB_PASSWORD}
        - REDIS_HOST=${REDIS_HOST}
        - REDIS_PORT=${REDIS_PORT}
        - MAX_WORKERS=${MAX_WORKERS}
        - BATCH_SIZE=${BATCH_SIZE}
      depends_on:
        - database
        - cache
      restart: "no"


  scorer:
    build: ./Scorer
    container_name: yahoo_scorer
    profiles: ["manual"]
    environment:
      - DB_HOST=database
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_PORT=5432
    depends_on:
      database:
        condition: service_healthy
    networks:
      - yahoo_network

  generador-trafico:
    build: ./Generador_Trafico
    container_name: yahoo_generador_trafico
    profiles: ["manual"]
    volumes:
      - dataset_volume:/data
    environment:
      - DB_HOST=database
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=cache
      - REDIS_PORT=6379
      - GEMINI_API_KEY1=${GEMINI_API_KEY1}
      - GEMINI_API_KEY2=${GEMINI_API_KEY2}
      - GEMINI_API_KEY3=${GEMINI_API_KEY3}
      - GEMINI_API_KEY4=${GEMINI_API_KEY4}
      - GEMINI_API_KEY5=${GEMINI_API_KEY5}
      - TRAFFIC_DISTRIBUTION=${TRAFFIC_DISTRIBUTION}
      - NUM_QUERIES=${NUM_QUERIES}
      - CACHE_POLICY=${CACHE_POLICY}
    depends_on:
      database:
        condition: service_healthy
      cache:
        condition: service_healthy
      cache-manager:
        condition: service_healthy
      llm-client:
        condition: service_healthy
      scorer:
        condition: service_healthy
    networks:
      - yahoo_network
  prueba:
    build:
      context: ./prueba   # Carpeta donde est치 tu script para pruebas
    container_name: llm_client_pruebas
    volumes:
      - ./prueba:/app      # Monta la carpeta de pruebas dentro del contenedor
      - ./local_data:/data # Para CSV y JSON de backup
    env_file:
      - .env
    environment:
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - MODEL=${MODEL}
      - CSV_PATH=/data/yahoo_answers.csv
      - LOCAL_JSON_PATH=/data/responses.json
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - MAX_WORKERS=${MAX_WORKERS}
      - BATCH_SIZE=${BATCH_SIZE}
    depends_on:
      database:
        condition: service_healthy
      cache:
        condition: service_healthy
    restart: "no"
    networks:
      - yahoo_network       # 游댳 a침adir esta l칤nea
volumes:
  dataset_volume:
    driver: local
  database_volume:
    driver: local

networks:
  yahoo_network:
    driver: bridge
